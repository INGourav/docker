when we install docker it installs 3 things Docker Deamon, REST API, and Docker CLI.
Docker Deamon is a background process that manages docker objects such as images, container, volume, and netowrk
Dokcer REST API server is a interface that provides program can talk to deamon to provide instructions. We could also create our own tools using this REST API.
Docker CLI is nothing its command line utility that we use to perform tasks on docker such as pull, push, run, stop, kill etc. It uses the REST API to interact with deamon.

Docker CLI we can install on another host and can work from any remote host.
docker -H=remote-docker-engine:2375  # the remote-docker-engine is the docker engine address where docker is installed and 2375 is the port
docker -H=10.10.1.1:2375 run ngnix   # this will run ngnix on docker that is installed on gievn Ip


How a container runs/works
Namspace - PID (Process ID)

System always starts with one process ID and when we create a container it will new subsystem in it and creates new PID from start. However this will create new PID in host system and two process cannot share same PID hence they are different with eachother.


-------------------------------------------------------------------------------
| PID:1                                                                       |
|      PID:2                                                                  |
|      PID:3                                                                  |
|      PID:4           _______________________________________                |
|                     |  Child System (COntainer)             |               |
|      PID:5 ---------|   PID:1                               |               |
|      PID:6 -------- |     PID:2                             |               |
|                     |                                       |               |
|                     |                                       |               |
|                     |                                       |               |
|                     |                                       |               |
|                     |                                       |               |
|                     |                                       |               |
|                     |_______________________________________|               |
|                                                                             |
|                                                                             |
|                                                                             |
|-----------------------------------------------------------------------------|


-------------------------------------------------------------------------------
|                           Linux System                                      |
|    ______________           ______________               ______________     |                                                             
|   |              |         |              |             |              |    |                                                      
|   |    Docker    |         |    Docker    |             |    Docker    |    |                   
|   |   Container  |         |   Container  |             |   Container  |    |
|   |              |         |              |             |              |    |
|   |              |         |              |             |              |    |
|   |              |         |              |             |              |    |
|   |              |         |              |             |              |    |
|   |              |         |              |             |              |    |
|   |______________|         |______________|             |______________|    |
|                                                                             |
|      _______________                ________________                        |
|     |      CPU      |              |   Memory       |                       |
|     |_______________|              |________________|                       |                                  |
|-----------------------------------------------------------------------------|


By default there is no limit that a conatiner can utilize how much of resources of a underline host.
Docker uses Cgroup to restrict these usage and this can be done at the time of container creation.
docker run --cpus=.5 ubuntu   # this will ensure that container will not consume more then 50% cpu of host at any time
docker run --memory=100m ubuntu

To list all the process running in a conatiner we use
docker exec <container_id> ps -eaf   # eaf is used to list all the process
ps -eaf | grep  <process_name>   # to check information of the process is running on host

Docker Storage : -
/var/lib/Docker   # this is the default diorectory of docker
    aufs
    containers
    image
    volumes

We can create our own volume and attach it to container at the time of container creation. As the lifecycle of docker volume is associated to it so this is the way to prevent data loss in case of conatiner deletion/stop.

docker volume create data_volume_1   # this will create a diorectory in volumes.
docker run -v data_volume_1:/var/lib/mysql mysql  # this will attach custom volume to the conatiner.
docker run -v data_volume_2:/var/lib/mysql mysql  # here we havenot created a volume 2 diorectory however docker will automatically create it.
docker run -v /var/lib/data:var/lib/mysql mysql   # this will not create volume inside volume folder as we are givinng fully qualified diorectory name and this is know BIND mounting
docker run --mount type=bind,source=/home/dockervm-adm/data,target=/var/lib/mysql mysql  # new way to use it -v is old skool method


storage driver used by docker, the selection of depends on underline host OS.
aufs
zfs
btrfs
device mapper
overlay
overlay2

docker info | more  # this will give output about storage driver

######### Snip of output  #########
#    Server Version: 20.10.7      #
#   Storage Driver: overlay2      #
######### Snip of output  #########


ls -l /var/lib/docker/aufs/ or ls -l /var/lib/docker/overlay2/   # here docker stores all the scripts and file of an image
docker history <conatiner_id>     # this will populate all the setps thse were performed for its creation

docker system df  # this will show us stoarge consumption by images, conatiner, local volume, and build cache



Docker Network : -
There are 3 network created by default Brideg (172.17.0.1), Host, and None
By default conatiners associated to bridge network and to associate with othet network we have to define this in command in run time.
docker run centos --network none
docker network create --driver bridge --subnet 182.18.0.0/16 custom-isolated-net  # create a new network
docker network ls         # to list all the created network
docker network connect custom-isolated-net fan_boy    # Connect a running container to a network
docker network rm dc21eb1875ca   # to delete the gievn network
docker network prune  OR  docker network prune -f  # to remove all unsed network



Docker has a built-in DNS server that runs on 172.0.0.11


Some links
https://docs.docker.com/config/containers/resource_constraints/
